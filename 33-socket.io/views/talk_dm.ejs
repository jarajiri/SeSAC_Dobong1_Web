<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous" />
    <script src="/socket.io/socket.io.js"></script>
    <style>
      .container {
        background-color: #9bbbd4;
        height: 500px;
        margin-top: 20px;
        padding: 0;
        display: flex;
        flex-direction: column;
      }

      /* header */
      .container header {
        width: 100%;
        box-shadow: 0px 2px 2px #111a20;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-basis: 10%; /* 아이템이 전체에서 차지하는 비율 설정 */
      }

      /* section */
      .container section {
        padding: 16px;
        overflow-y: auto;
        flex-basis: 80%;
      }

      /* 스크롤 모양 변경 */
      .container section::-webkit-scrollbar {
        width: 4px;
      }
      .container section::-webkit-scrollbar-thumb {
        background-color: #888;
        border-radius: 10px;
        padding: 1px;
        margin: 1px;
      }
      .container section::-webkit-scrollbar-track {
        padding: 1px;

        background-color: #ccc;
        border-radius: 10px;
        box-shadow: inset 0px 0px 2px white;
      }

      /* section 말풍선 */
      .container .speech .msg-box {
        display: inline-block;
        box-shadow: 1px 1px 5px #7a7a7a;
        border-radius: 8px;
        padding: 0.3rem;
        margin: 0.5rem 0;
        max-width: 60%;
      }

      .container .speech.me {
        /* display: flex; */
        /* justify-content: flex-end; */
        text-align: right;
      }

      .container .speech.other {
        position: relative;
        margin: 10px 0;
      }
      .container .speech.other .nickname {
        font-size: 10px;
        position: absolute;
        top: -8px;
      }

      .container .speech.me .msg-box {
        background-color: #fef01b;
      }
      .container .speech.other .msg-box {
        background-color: #ffffff;
      }
      /* msg-form */
      .container .msg-form {
        display: flex;
        justify-content: space-between;
        padding: 8px 16px;
        flex-basis: 10%;
      }

      .container .msg-form input {
        flex-basis: 80%;
        border: none;
        outline: none;
        border-radius: 100px;
        padding: 8px 16px;
      }
      .container .msg-form input:focus + button {
        background-color: #fef01b;
      }

      .container .msg-form button {
        flex-basis: 15%;
        border: none;
      }
      /* dm-select 추가 */
      .container .msg-form #dm-select {
        flex-basis: 12%;
        border: none;
        outline: none;
        border-radius: 3px;
        text-align: center;
      }
      /* dm css */
      .container .speech.other.dm .msg-box {
        background-color: #fff5;
      }
      /* 입장 알림 CSS */
      .container section .notice {
        width: 80%;
        background-color: #fff5;
        border-radius: 50px;
        text-align: center;
        padding: 2px;
        color: #4449;
        margin: 8px auto;
        font-size: 14px;
      }
    </style>
  </head>
  <body>
    <!-- 닉네입 입력창, 채팅방 입장 버튼 추가 -->
    <div class="entry-box">
      <input type="text" placeholder="닉네임 입력" id="nickname" />
      <button onclick="join()">채팅방 입장하기</button>
    </div>

    <div class="container d-none">
      <header>코코아톡 🥊</header>

      <section>
        <!-- <div class="speech me">
          <span class="msg-box">내 메시지</span>
        </div>
        <div class="speech other">
          <span class="nickname">socket.id</span>
          <span class="msg-box">다른 사람이 보낸 채팅 내용</span>
        </div>
        <div class="notice">이몸등장</div> -->
      </section>

      <form class="msg-form" id="msg-form">
        <select id="dm-select">
          <!-- <option value="">전체</option>
          <option value="">닉네임1</option>
          <option value="">닉네임2</option> -->
        </select>
        <input type="text" placeholder="메세지 입력" />
        <button type="submit">전송</button>
      </form>
    </div>
  </body>

  <script>
    const socket = io();
    const chatContainer = document.querySelector(".container section");
    const chatForm = document.querySelector("#msg-form");
    const nicknameInput = document.querySelector("#nickname");
    const container = document.querySelector(".container");
    const select = document.querySelector("#dm-select");
    // 닉네임 사용해서 채팅 방 입장하기
    // 닉네임을 서버에 보내서 중복된 닉네임인지 체크
    function join() {
      socket.emit("checkNick", nicknameInput.value);
    }
    let myNick;
    socket.on("error", (errMsg) => {
      alert(errMsg);
    });

    socket.on("entrySuccess", (mynick) => {
      myNick = mynick;
      nicknameInput.disabled = true;
      document.querySelector(".entry-box > button").classList.add("d-none");
      container.classList.remove("d-none");
    });

    socket.on("notice", (noticeMsg) => {
      console.log(noticeMsg);
      const div = document.createElement("div");
      div.textContent = noticeMsg;
      div.classList.add("notice");
      chatContainer.append(div);
    });

    socket.on("updateNicks", (nickInfo) => {
      //nickInfo ex {'alkdjf;alskd':'rime'}
      let options = `<option value='all'>전체</option>`;

      //배열순회문 for ~ in
      for (let key in nickInfo) {
        console.log("for in key : ", key);
        console.log("for in value : ", nickInfo[key]);
        let option = `<option value='${key}'>${nickInfo[key]}</option>`;
        if (nickInfo[key] !== myNick) options += option;
        select.innerHTML = options;
      }
    });

    chatForm.addEventListener("submit", (e) => {
      e.preventDefault();
      const input = chatForm.querySelector("input");
      if (input.value.trim() === "") return;

      const sendData = {
        myNick,
        dm: select.value,
        msg: input.value,
      };

      socket.emit("send", sendData);
      input.value = "";
    });

    socket.on("message", (msgInfo) => {
      const div = document.createElement("div");
      const span = document.createElement("span");
      span.classList.add("msg-box");
      // span.textContent = msgInfo.message;
      div.append(span);

      if (msgInfo.isDm) {
        // true
        // dm
        span.textContent = "[DM]" + msgInfo.message;
      } else {
        // undefined
        // 전체보내기
        span.textContent = msgInfo.message;
      }

      if (myNick === msgInfo.id) {
        // 내가보낸메시지
        div.classList.add("speech", "me");
      } else {
        if (msgInfo.isDm) {
          div.classList.add("dm");
        }
        const nickname = document.createElement("span");
        div.classList.add("speech", "other");
        nickname.classList.add("nickname");
        nickname.textContent = msgInfo.id;
        div.prepend(nickname);
      }
      chatContainer.append(div);
      chatContainer.scrollTop = chatContainer.scrollHeight;
    });
  </script>
</html>
