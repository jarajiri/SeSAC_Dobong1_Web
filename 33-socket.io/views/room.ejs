<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>채팅방</title>
    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body>
    <!-- ~~가 입장했습니다. -->
    <div id="users"></div>
    <!-- 채팅방 내용 -->
    <div id="space"></div>

    <form id="chat">
      <input type="text" placeholder="채팅 내용" id="message" />
      <button type="submit">보내기</button>
    </form>
    <script>
      const socket = io();
      const users = document.querySelector("#users");
      const space = document.querySelector("#space");
      const chatForm = document.querySelector("#chat");
      const chattingRoom = prompt("채팅방을 입력해주세요");

      const h2 = document.createElement("h2");
      h2.innerText = `채팅방 ${chattingRoom}`;
      document.body.prepend(h2);

      // 1. 클라이언트에서 서버에게, 방이름 전달
      socket.emit("join", chattingRoom);

      // 4. 입장 메시지 화면에 보여주기
      socket.on("userjoin", (message) => {
        // console.log(message);
        const p = document.createElement("p");
        p.innerText = message;
        users.append(p);
        // 2초 이후 입장 문구 삭제
        setTimeout(() => {
          p.remove();
        }, 2000);
      });
      // 5. 서버에메시지 보내기
      chatForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const input = chatForm.querySelector("#message");
        const message = input.value;
        socket.emit("message", message);
        input.value = "";
      });
      // 7. 서버에서 주는 메시지를 받아서 화면에 보여주기
      socket.on("message_toAll", (message, id) => {
        const p = document.createElement("p");
        p.innerText = `${id} :: ${message}`;
        space.append(p);
      });
    </script>
  </body>
</html>
